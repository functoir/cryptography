############################################################################
# CIPHER #1 Substitution
############################################################################

ciphertext1 = 'ovdkljoodkbplabzgufvdklacvqlkbzvwljjvgvlybzvzujjqlkbzvjlyvsuyvdtlfvzvkdyobzvjlrdjlyvcizljlfvzvkgufvdklacvgufvdklacviubzdiujjqlkbzvclyclqljoodkbplabzqlkbzvodagzbvkclqodkbplabzbzlagzklayobzvgukojvovdkbzbzvrkldpzvkcsvjjlybzvpkvpduycbzvrzdfvbzvcbujjylkbzuybzvukzvdkbcbzvzujjiuyocuybzvukfvuycdyobzvgkdyubvlqyvizdpsczukvuybzvukpacwjvcdyobzvuktkduycdzuybqlkwuszvkcuhucbzvlkovklqqufvploajlsuccpdjj'


############################################################################
# CIPHER #2 Vigenere
############################################################################

ciphertext2 = 'hcbxpcjlemyzlgjwagtfjhtnvvriarrqzvuqbipjrqhggrzwtfnahgkqfesrqszvodyabgcwafvvrotsotdreoaqnbnfzgcbqetqloafvvnpapnqvzrzvyarnrpzgoashycwzvvwaphmbssvvhyammusjhnsfwnbbhbshhuwtkjylhrangemwsjnvprdatnrpshseanrumabcbbphcacygjogiainojnvvbsdmhcbqgtvjeyloavjoianmrrln'


############################################################################
# CIPHER #3 Affine
############################################################################

ciphertext3 = [6917141364293641, 5044493105177484, 10208794241351887, 16394322558427148, 11758121930809893, 15571898457877977, 7672722015089403, 13661070158473411, 17999297470735005, 12313955920676335, 5960590266677512, 1613421779734456, 1750819096862416, 3118598423638319, 14816640742963862, 4952241931583899, 12257144082730227, 7862771476786858, 5006500927265261, 11323114722137903, 22833602100630408, 8963415721169565, 15595638667025459, 8028339051359388, 3385708046121353, 12190779082257523, 8983375210790796, 15571898457877977, 15147654701575566, 16361132341028484, 5962327355151718, 8901193427034701, 5179568152435730, 3672045789372412, 23610469115026974, 1577294047287513, 15642317927380556, 15571898457877977, 10282634434851196, 10749617216933305, 17838746455253440, 21499666401460178, 1037344909841996, 17413814796435480, 16269186929768054, 10449344135634668, 24087490685235750, 10768725190149571, 6484888204271905, 22185358129776042, 19377417029468988, 16267449841293848, 16555381474675390, 21520574190817628, 14140526597210259, 19733309797334806, 16283129124025650, 16538093542757166, 24098448719654436, 16798515250649044, 13879801264995293, 10264930014031131, 7946076055449771, 18258106201941864, 423054714981679, 17458353983971638, 9294184051519018, 19030921054252445]

# strtoint is used several time in the challenge; it takes as input a string block and returns as output an integer encoding (ASCII bytes)
def strtoint(plaintext_block):
    modn = [bin(ord(c))[2:] for c in plaintext_block]
    modn = [ ''.join(['0' for i in range(8-len(m))]) + m for m in modn]
    return int('0b' + ''.join(modn),2)

# inttostr is the inverse of strtoint; it takes as input an integer encoding of a string (ASCII bytes) and returns as output the string
def inttostr(int_block):
    s = bin(int_block)[2:]
    s = ''.join(['0' for i in range(8-(len(s)%8))]) + s
    s = ['0b' + s[8*i:8*(i+1)] for i in range(len(s)/8)]
    return ''.join([chr(int(c,2)) for c in s])

# small example
m = [strtoint(pblock) for pblock in ["Hello", ' ther', "e!@#!"]]
print m
print ''.join([inttostr(cblock) for cblock in m])

############################################################################
# CIPHER #5 RSA
############################################################################

n5 = 2490736346492104721729722567335076257528146493316778156981974373631622149367708642633012928856521206471732646282243373960731

y5_alice = 1175930342106065271050283250310309419316488156305401520290443548602035808283262101734292122005367394797217259116903341956086

y5_bob = 1799306147392696606782310867010621904452538401321735738023524507758249509686120401186634973441137240046185785005515614987681


############################################################################
# CIPHER #6 RSA
############################################################################

n6 = 166530529432965340099271666821176530188535972283046096996016364234771423224878910478932117699610350618246947860042343417159

y6 = 149441402545605284082094630171037686837410554943035204389042797718540079485257006113787250895354916689260854817821121453874


############################################################################
# CIPHER #7 Diffie-Hellman
############################################################################

p7 = 1600774441581334219780600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000432209099226960239340763

g7 = 2

g_to_the_a = 1159168527036885933217857608933012368969916724304207076792223092825093177512291442700122665102003093468081496673825777878786330002771542293766114467228890040575216761614423950398825418437936

g_to_the_b = 575888213681660770475128571088550295674623296573691479085064213967623740013786721669248908515706185159465035805440862621304296869839120646574688710399284505691846199112507789898432268180523

m7 = 620945601844830146411372829211407124029166699782737399787363634438224667948005628550729901067384508056258649925961457566814249100027830822531155426663083200685298415308333701929015786144937


############################################################################
# CIPHER #8 Elliptic curve ElGamel
############################################################################

p = 2^31 - 1
E = EllipticCurve(GF(p), [1,1])
print E

G = E(2120200592, 1037835596)
print "G has order", G.order()   # Order of G

bG = E(502702028, 397327625)

aG = E(1271659322, 1653304)

XabG = E(86041769, 166781836)

# starting the baby steps...
[i*G for i in range(4)]

bG + G

# Good luck and have fun!

